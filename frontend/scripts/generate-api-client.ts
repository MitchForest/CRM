#!/usr/bin/env node
/**
 * Generate TypeScript API client from OpenAPI specification
 * This creates a fully type-safe client with all endpoints and models
 */

import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

const OPENAPI_URL = process.env.VITE_API_URL 
  ? `${process.env.VITE_API_URL}/api-docs/openapi.json`
  : 'http://localhost:8080/api-docs/openapi.json';

const OUTPUT_DIR = path.join(process.cwd(), 'src', 'api', 'generated');

async function generateApiClient() {
  try {
    console.log('üîÑ Generating TypeScript API client from OpenAPI spec...');
    
    // Ensure output directory exists
    if (!fs.existsSync(OUTPUT_DIR)) {
      fs.mkdirSync(OUTPUT_DIR, { recursive: true });
    }

    // Check if openapi-generator-cli is installed
    try {
      await execAsync('npx openapi-generator-cli version');
    } catch (error) {
      console.log('üì¶ Installing OpenAPI Generator CLI...');
      await execAsync('npm install -g @openapitools/openapi-generator-cli');
    }

    // Generate TypeScript client with axios
    const command = `
      npx openapi-generator-cli generate \
        -i ${OPENAPI_URL} \
        -g typescript-axios \
        -o ${OUTPUT_DIR} \
        --additional-properties=\
modelPropertyNaming=snake_case,\
paramNaming=snake_case,\
enumPropertyNaming=UPPER_CASE,\
supportsES6=true,\
withSeparateModelsAndApi=true,\
apiPackage=api,\
modelPackage=models,\
withInterfaces=true,\
useSingleRequestParameter=true
    `.replace(/\s+/g, ' ').trim();

    console.log('üöÄ Running generator...');
    const { stdout, stderr } = await execAsync(command);
    
    if (stderr && !stderr.includes('Successfully generated')) {
      console.error('‚ö†Ô∏è Generator warnings:', stderr);
    }

    console.log('‚úÖ API client generated successfully');

    // Create a barrel export file
    const indexContent = `/**
 * Generated API Client
 * 
 * This is an auto-generated TypeScript client from the OpenAPI specification.
 * DO NOT EDIT THIS FILE DIRECTLY.
 * 
 * To regenerate: npm run generate:api-client
 */

// Export all APIs
export * from './api';

// Export all models
export * from './models';

// Export configuration
export { Configuration } from './configuration';

// Re-export commonly used types with cleaner names
export type {
  Lead as LeadAPI,
  Contact as ContactAPI,
  Opportunity as OpportunityAPI,
  Case as CaseAPI,
  User as UserAPI,
  Task as TaskAPI,
  Call as CallAPI,
  Meeting as MeetingAPI,
  Note as NoteAPI
} from './models';
`;

    fs.writeFileSync(path.join(OUTPUT_DIR, 'index.ts'), indexContent);

    // Create a custom API client wrapper that uses our existing auth
    const wrapperContent = `/**
 * API Client Wrapper
 * 
 * This wraps the generated API client with our authentication logic
 */

import { Configuration } from './generated';
import * as APIs from './generated/api';
import { getStoredAuth } from '@/stores/auth-store';

// Create configuration with auth
function createConfiguration(): Configuration {
  const auth = getStoredAuth();
  
  return new Configuration({
    basePath: '/api',
    accessToken: auth?.accessToken,
    headers: {
      'Content-Type': 'application/json',
    }
  });
}

// Export wrapped API instances
export const leadsApi = new APIs.LeadsApi(createConfiguration());
export const contactsApi = new APIs.ContactsApi(createConfiguration());
export const opportunitiesApi = new APIs.OpportunitiesApi(createConfiguration());
export const casesApi = new APIs.CasesApi(createConfiguration());
export const activitiesApi = new APIs.ActivitiesApi(createConfiguration());
export const authApi = new APIs.AuthenticationApi(createConfiguration());
export const dashboardApi = new APIs.DashboardApi(createConfiguration());

// Re-export types
export * from './generated/models';
`;

    fs.writeFileSync(path.join(OUTPUT_DIR, '..', 'client.ts'), wrapperContent);

    console.log('‚úÖ API client wrapper created');

    // Update tsconfig to include generated files
    console.log('üìù Updating tsconfig...');
    const tsconfigPath = path.join(process.cwd(), 'tsconfig.json');
    const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf-8'));
    
    if (!tsconfig.include) {
      tsconfig.include = [];
    }
    
    if (!tsconfig.include.includes('src/api/generated/**/*')) {
      tsconfig.include.push('src/api/generated/**/*');
      fs.writeFileSync(tsconfigPath, JSON.stringify(tsconfig, null, 2));
    }

    console.log('\nüéâ API client generation complete!');
    console.log('üìç Generated files are in:', OUTPUT_DIR);
    console.log('üì¶ Import from: @/api/client');

  } catch (error) {
    console.error('‚ùå Failed to generate API client:', error);
    process.exit(1);
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateApiClient();
}

export { generateApiClient };