openapi: 3.0.3
info:
  title: B2C CRM API
  description: Modern REST API for SuiteCRM with JWT authentication
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/custom/api/index.php
    description: Development server
  - url: https://api.example.com
    description: Production server

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login with username and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        200:
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout and invalidate tokens
      responses:
        200:
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"

  /contacts:
    get:
      tags:
        - Contacts
      summary: List contacts
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of contacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Contacts
      summary: Create new contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        201:
          description: Contact created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Get contact by ID
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: Contact details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Contacts
      summary: Update contact
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactInput'
      responses:
        200:
          description: Contact updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags:
        - Contacts
      summary: Delete contact
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: Contact deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Contact deleted successfully"
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /contacts/{id}/activities:
    get:
      tags:
        - Contacts
      summary: Get contact activities
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: List of activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityListResponse'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /leads:
    get:
      tags:
        - Leads
      summary: List leads
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of leads
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Leads
      summary: Create new lead
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeadInput'
      responses:
        201:
          description: Lead created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lead'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /leads/{id}/convert:
    post:
      tags:
        - Leads
      summary: Convert lead to contact
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: Lead converted
          content:
            application/json:
              schema:
                type: object
                properties:
                  contactId:
                    type: string
                  message:
                    type: string
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /opportunities:
    get:
      tags:
        - Opportunities
      summary: List opportunities
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of opportunities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpportunityListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Opportunities
      summary: Create new opportunity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpportunityInput'
      responses:
        201:
          description: Opportunity created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Opportunity'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /opportunities/{id}/analyze:
    post:
      tags:
        - Opportunities
      summary: Analyze opportunity with AI
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: AI analysis results
          content:
            application/json:
              schema:
                type: object
                properties:
                  insights:
                    type: string
                  score:
                    type: number
                  recommendations:
                    type: array
                    items:
                      type: string
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /tasks:
    get:
      tags:
        - Tasks
      summary: List tasks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Tasks
      summary: Create new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        201:
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /tasks/{id}/complete:
    post:
      tags:
        - Tasks
      summary: Mark task as complete
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: Task completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /tasks/upcoming:
    get:
      tags:
        - Tasks
      summary: Get upcoming tasks
      responses:
        200:
          description: List of upcoming tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /tasks/overdue:
    get:
      tags:
        - Tasks
      summary: Get overdue tasks
      responses:
        200:
          description: List of overdue tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /cases:
    get:
      tags:
        - Cases
      summary: List cases
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of cases
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Cases
      summary: Create new case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaseInput'
      responses:
        201:
          description: Case created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /cases/{id}/updates:
    get:
      tags:
        - Cases
      summary: Get case updates
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: List of case updates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CaseUpdate'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Cases
      summary: Add case update
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                internal:
                  type: boolean
      responses:
        201:
          description: Update added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseUpdate'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /quotes:
    get:
      tags:
        - Quotes
      summary: List quotes
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of quotes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Quotes
      summary: Create new quote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteInput'
      responses:
        201:
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /quotes/{id}/send:
    post:
      tags:
        - Quotes
      summary: Send quote to customer
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: Quote sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  stage:
                    type: string
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /quotes/{id}/convert:
    post:
      tags:
        - Quotes
      summary: Convert quote to invoice
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: Quote converted
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoiceId:
                    type: string
                  message:
                    type: string
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /emails:
    get:
      tags:
        - Emails
      summary: List emails
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of emails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /emails/send:
    post:
      tags:
        - Emails
      summary: Send new email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailSendRequest'
      responses:
        200:
          description: Email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /emails/{id}/reply:
    post:
      tags:
        - Emails
      summary: Reply to email
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  type: string
                bodyHtml:
                  type: string
      responses:
        200:
          description: Reply sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /emails/{id}/forward:
    post:
      tags:
        - Emails
      summary: Forward email
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - to
              properties:
                to:
                  type: array
                  items:
                    $ref: '#/components/schemas/EmailAddress'
                body:
                  type: string
      responses:
        200:
          description: Email forwarded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /calls:
    get:
      tags:
        - Calls
      summary: List calls
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of calls
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CallListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Calls
      summary: Create new call
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallInput'
      responses:
        201:
          description: Call created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /calls/{id}/hold:
    post:
      tags:
        - Calls
      summary: Mark call as held
      parameters:
        - $ref: '#/components/parameters/IdParam'
      responses:
        200:
          description: Call marked as held
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /meetings:
    get:
      tags:
        - Meetings
      summary: List meetings
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of meetings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeetingListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Meetings
      summary: Create new meeting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetingInput'
      responses:
        201:
          description: Meeting created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /meetings/{id}/invitees/{inviteeId}:
    put:
      tags:
        - Meetings
      summary: Update invitee status
      parameters:
        - $ref: '#/components/parameters/IdParam'
        - name: inviteeId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [invited, accepted, declined, tentative]
      responses:
        200:
          description: Invitee status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /notes:
    get:
      tags:
        - Notes
      summary: List notes
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FilterParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        200:
          description: List of notes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Notes
      summary: Create new note
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteInput'
      responses:
        201:
          description: Note created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /notes/search:
    get:
      tags:
        - Notes
      summary: Search notes
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
          description: Search query
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResponse'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/Unauthorized'

  /notes/{id}/upload:
    post:
      tags:
        - Notes
      summary: Upload file attachment
      parameters:
        - $ref: '#/components/parameters/IdParam'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: File uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          $ref: '#/components/responses/ValidationError'
        404:
          $ref: '#/components/responses/NotFound'
        401:
          $ref: '#/components/responses/Unauthorized'

  /activities:
    get:
      tags:
        - Activities
      summary: List all activities
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: type
          in: query
          schema:
            type: string
            enum: [Call, Meeting, Email, Task, Note]
        - name: relatedId
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /activities/upcoming:
    get:
      tags:
        - Activities
      summary: Get upcoming activities
      responses:
        200:
          description: List of upcoming activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

  /activities/recent:
    get:
      tags:
        - Activities
      summary: Get recent activities
      responses:
        200:
          description: List of recent activities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    IdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Resource ID

    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Items per page

    FilterParam:
      name: filter
      in: query
      schema:
        type: string
      description: 'Filter format: field:operator:value (e.g., status:eq:active)'

    SortParam:
      name: sort
      in: query
      schema:
        type: string
      description: 'Sort format: field:direction (e.g., created_at:desc)'

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized"
            code: "UNAUTHORIZED"

    Forbidden:
      description: Access denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Access denied"
            code: "FORBIDDEN"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Resource not found"
            code: "NOT_FOUND"

    ValidationError:
      description: Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Validation failed"
            code: "VALIDATION_FAILED"
            validation:
              field_name: ["Error message"]

  schemas:
    # Base Schemas
    ErrorResponse:
      type: object
      required:
        - error
        - code
      properties:
        error:
          type: string
        code:
          type: string
        details:
          type: object
        validation:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
        totalCount:
          type: integer
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    # Auth Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        tokenType:
          type: string
        user:
          type: object
          properties:
            id:
              type: string
            username:
              type: string
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
        tokenType:
          type: string

    # Entity Schemas
    Contact:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        mobile:
          type: string
        title:
          type: string
        birthDate:
          type: string
          format: date
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        customerNumber:
          type: string
        preferredContactMethod:
          type: string
          enum: [email, phone, sms]
        tags:
          type: array
          items:
            type: string
        customFields:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lifetimeValue:
          type: number
        lastActivityDate:
          type: string
          format: date-time

    ContactInput:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        mobile:
          type: string
        title:
          type: string
        birthDate:
          type: string
          format: date
        preferredContactMethod:
          type: string
          enum: [email, phone, sms]
        tags:
          type: array
          items:
            type: string

    ContactListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Lead:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        mobile:
          type: string
        title:
          type: string
        company:
          type: string
        website:
          type: string
          format: uri
        description:
          type: string
        status:
          type: string
          enum: [New, Contacted, Qualified, Converted, Dead]
        source:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        convertedContactId:
          type: string
        convertedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    LeadInput:
      type: object
      required:
        - firstName
        - lastName
        - email
        - status
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        mobile:
          type: string
        title:
          type: string
        company:
          type: string
        website:
          type: string
          format: uri
        description:
          type: string
        status:
          type: string
          enum: [New, Contacted, Qualified, Converted, Dead]
        source:
          type: string

    LeadListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Lead'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Opportunity:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        amount:
          type: number
        currency:
          type: string
        probability:
          type: number
          minimum: 0
          maximum: 100
        salesStage:
          type: string
        closeDate:
          type: string
          format: date
        description:
          type: string
        nextStep:
          type: string
        contactId:
          type: string
        contactName:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        aiInsights:
          type: string
        aiScore:
          type: number
        aiRecommendations:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    OpportunityInput:
      type: object
      required:
        - name
        - amount
        - salesStage
        - closeDate
      properties:
        name:
          type: string
        amount:
          type: number
        currency:
          type: string
        probability:
          type: number
        salesStage:
          type: string
        closeDate:
          type: string
          format: date
        description:
          type: string
        nextStep:
          type: string
        contactId:
          type: string

    OpportunityListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Opportunity'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [Not Started, In Progress, Completed, Pending Input, Deferred]
        priority:
          type: string
          enum: [High, Medium, Low]
        dueDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
        percentComplete:
          type: number
          minimum: 0
          maximum: 100
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        parentName:
          type: string
        contactId:
          type: string
        contactName:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        reminderTime:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    TaskInput:
      type: object
      required:
        - name
        - status
        - priority
      properties:
        name:
          type: string
        status:
          type: string
          enum: [Not Started, In Progress, Completed, Pending Input, Deferred]
        priority:
          type: string
          enum: [High, Medium, Low]
        dueDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
        percentComplete:
          type: number
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        contactId:
          type: string
        reminderTime:
          type: string
          format: date-time

    TaskListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Case:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        caseNumber:
          type: string
        type:
          type: string
        status:
          type: string
          enum: [New, Assigned, Closed, Pending Input, Rejected, Duplicate]
        priority:
          type: string
          enum: [High, Medium, Low]
        resolution:
          type: string
        description:
          type: string
        subject:
          type: string
        contactId:
          type: string
        contactName:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        updates:
          type: array
          items:
            $ref: '#/components/schemas/CaseUpdate'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CaseInput:
      type: object
      required:
        - name
        - status
        - priority
      properties:
        name:
          type: string
        type:
          type: string
        status:
          type: string
          enum: [New, Assigned, Closed, Pending Input, Rejected, Duplicate]
        priority:
          type: string
          enum: [High, Medium, Low]
        resolution:
          type: string
        description:
          type: string
        subject:
          type: string
        contactId:
          type: string

    CaseListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Case'
        pagination:
          $ref: '#/components/schemas/Pagination'

    CaseUpdate:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        internal:
          type: boolean
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time

    Quote:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        quoteNumber:
          type: string
        stage:
          type: string
          enum: [Draft, Sent, Accepted, Rejected, Expired]
        validUntil:
          type: string
          format: date
        opportunityId:
          type: string
        opportunityName:
          type: string
        contactId:
          type: string
        contactName:
          type: string
        billingAddress:
          $ref: '#/components/schemas/Address'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        currency:
          type: string
        subtotal:
          type: number
        tax:
          type: number
        shipping:
          type: number
        total:
          type: number
        discount:
          type: number
        discountType:
          type: string
          enum: [Percentage, Amount]
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        terms:
          type: string
        description:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    QuoteInput:
      type: object
      required:
        - name
        - stage
      properties:
        name:
          type: string
        stage:
          type: string
          enum: [Draft, Sent, Accepted, Rejected, Expired]
        validUntil:
          type: string
          format: date
        opportunityId:
          type: string
        contactId:
          type: string
        billingAddress:
          $ref: '#/components/schemas/Address'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        currency:
          type: string
        discount:
          type: number
        discountType:
          type: string
          enum: [Percentage, Amount]
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItemInput'
        terms:
          type: string
        description:
          type: string

    QuoteListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Quote'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string

    LineItem:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        name:
          type: string
        description:
          type: string
        quantity:
          type: number
        unitPrice:
          type: number
        discount:
          type: number
        tax:
          type: number
        total:
          type: number

    LineItemInput:
      type: object
      required:
        - name
        - quantity
        - unitPrice
      properties:
        productId:
          type: string
        name:
          type: string
        description:
          type: string
        quantity:
          type: number
        unitPrice:
          type: number
        discount:
          type: number
        tax:
          type: number

    Email:
      type: object
      properties:
        id:
          type: string
          format: uuid
        subject:
          type: string
        body:
          type: string
        bodyHtml:
          type: string
        from:
          $ref: '#/components/schemas/EmailAddress'
        to:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
        cc:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
        replyTo:
          $ref: '#/components/schemas/EmailAddress'
        status:
          type: string
          enum: [draft, sent, received, archived]
        type:
          type: string
          enum: [inbound, outbound, draft]
        parentType:
          type: string
        parentId:
          type: string
        parentName:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
        messageId:
          type: string
        inReplyTo:
          type: string
        importance:
          type: string
          enum: [high, normal, low]
        flags:
          type: array
          items:
            type: string
        folder:
          type: string
        threadId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EmailSendRequest:
      type: object
      required:
        - subject
        - to
        - body
      properties:
        subject:
          type: string
        to:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
        cc:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddress'
        body:
          type: string
        bodyHtml:
          type: string
        importance:
          type: string
          enum: [high, normal, low]
        parentType:
          type: string
        parentId:
          type: string

    EmailListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        pagination:
          $ref: '#/components/schemas/Pagination'

    EmailAddress:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
        name:
          type: string

    Call:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        direction:
          type: string
          enum: [Inbound, Outbound]
        status:
          type: string
          enum: [Planned, Held, Cancelled]
        startDate:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in minutes
        phoneNumber:
          type: string
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        parentName:
          type: string
        contactId:
          type: string
        contactName:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        reminderTime:
          type: string
          format: date-time
        result:
          type: string
        recordingUrl:
          type: string
          format: uri
        recurrence:
          $ref: '#/components/schemas/RecurrenceRule'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CallInput:
      type: object
      required:
        - name
        - direction
        - status
        - startDate
      properties:
        name:
          type: string
        direction:
          type: string
          enum: [Inbound, Outbound]
        status:
          type: string
          enum: [Planned, Held, Cancelled]
        startDate:
          type: string
          format: date-time
        duration:
          type: integer
        phoneNumber:
          type: string
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        contactId:
          type: string
        reminderTime:
          type: string
          format: date-time
        recurrence:
          $ref: '#/components/schemas/RecurrenceRule'

    CallListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Call'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Meeting:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        status:
          type: string
          enum: [Planned, Held, Cancelled]
        type:
          type: string
          enum: [In Person, Virtual, Phone]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in minutes
        location:
          type: string
        meetingUrl:
          type: string
          format: uri
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        parentName:
          type: string
        contactId:
          type: string
        contactName:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        invitees:
          type: array
          items:
            $ref: '#/components/schemas/Invitee'
        reminderTime:
          type: string
          format: date-time
        agenda:
          type: string
        minutes:
          type: string
        recurrence:
          $ref: '#/components/schemas/RecurrenceRule'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MeetingInput:
      type: object
      required:
        - name
        - status
        - type
        - startDate
        - endDate
      properties:
        name:
          type: string
        status:
          type: string
          enum: [Planned, Held, Cancelled]
        type:
          type: string
          enum: [In Person, Virtual, Phone]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          type: string
        meetingUrl:
          type: string
          format: uri
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        contactId:
          type: string
        invitees:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              status:
                type: string
        reminderTime:
          type: string
          format: date-time
        agenda:
          type: string
        recurrence:
          $ref: '#/components/schemas/RecurrenceRule'

    MeetingListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Meeting'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Invitee:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [contact, lead, user]
        name:
          type: string
        email:
          type: string
          format: email
        status:
          type: string
          enum: [invited, accepted, declined, tentative]

    RecurrenceRule:
      type: object
      required:
        - frequency
      properties:
        frequency:
          type: string
          enum: [daily, weekly, monthly, yearly]
        interval:
          type: integer
          minimum: 1
        count:
          type: integer
          minimum: 1
        until:
          type: string
          format: date
        byDay:
          type: array
          items:
            type: string
        byMonth:
          type: array
          items:
            type: integer
        byMonthDay:
          type: array
          items:
            type: integer

    Note:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        parentName:
          type: string
        contactId:
          type: string
        contactName:
          type: string
        assignedUserId:
          type: string
        assignedUserName:
          type: string
        attachment:
          $ref: '#/components/schemas/Attachment'
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    NoteInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        parentType:
          type: string
        parentId:
          type: string
        contactId:
          type: string
        tags:
          type: array
          items:
            type: string

    NoteListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Attachment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        mimeType:
          type: string
        size:
          type: integer
        content:
          type: string
          format: byte
          description: Base64 encoded file content

    Activity:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [Call, Meeting, Email, Task, Note]
        subject:
          type: string
        description:
          type: string
        date:
          type: string
          format: date-time
        status:
          type: string
        relatedTo:
          type: string
        relatedType:
          type: string
        relatedId:
          type: string
        assignedTo:
          type: string
        assignedToName:
          type: string
        createdBy:
          type: string
        createdByName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ActivityListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
        pagination:
          $ref: '#/components/schemas/Pagination'

tags:
  - name: Authentication
    description: JWT authentication endpoints
  - name: Contacts
    description: Customer contact management
  - name: Leads
    description: Sales lead management
  - name: Opportunities
    description: Sales opportunity tracking
  - name: Tasks
    description: Task management
  - name: Cases
    description: Customer support cases
  - name: Quotes
    description: Sales quotations
  - name: Emails
    description: Email communication
  - name: Calls
    description: Phone call tracking
  - name: Meetings
    description: Meeting management
  - name: Notes
    description: Note taking
  - name: Activities
    description: Activity timeline